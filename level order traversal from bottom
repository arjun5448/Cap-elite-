class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        List<List<Integer>>l1=new ArrayList<>();
        Queue<TreeNode>queue=new LinkedList<>();
        if(root==null){
            return l1;
        }
        Integer p=root.val;
        List<Integer>l2=new ArrayList<>();
        l2.add(root.val);
        l1.add(l2);
        queue.add(root);
        while(!queue.isEmpty()){
            int size=queue.size();
            List<Integer>l=new ArrayList<>();
            for(int i=1;i<=size;i++){
                TreeNode tempNode=queue.poll();
                if(tempNode.left!=null){
                    queue.add(tempNode.left);
                    l.add(tempNode.left.val);
                }
                 if(tempNode.right!=null){
                    queue.add(tempNode.right);
                    l.add(tempNode.right.val);
                }

            }
            l1.add(l);
        }
       
        List<List<Integer>>l3=new ArrayList<>();
        for(int j=l1.size()-1;j>=1;j--){
            l3.add(l1.get(j-1));
        }
        return l3;
    }
}
    
